const TelegramBot = require("node-telegram-bot-api")
require("dotenv").config()
const {teachers, scheduleParams} = require('./options')
const {default: axios} = require("axios")
const {TEACHERS, VK, KEY, SHEET_NAME} = require('./data')

const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, {polling: true})

const start = () => {

    bot.setMyCommands([
        {command: '/start', description: '–í—ã–±–æ—Ä –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è'},
        {command: '/about', description: '–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–±–æ –º–Ω–µ'},
    ])        
    
    bot.on('message', msg => {
        const chatId = msg.chat.id
        const text = msg.text
        try{
            if (text === '/start'){    
                return bot.sendMessage(chatId,
                '–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å —Å–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –≤—ã–±–µ—Ä–∏—Ç–µ –í–∞—à–µ –∏–º—è –≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–º —Å–ø–∏—Å–∫–µ. –î–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ /about',
                teachers)
            }
            if (text === '/about'){
                return bot.sendMessage(chatId, 
                `–Ø –±–æ—Çü§ñ, –∫–æ—Ç–æ—Ä—ã–π —É–º–µ–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –í–∞–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏üìù. –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –≤—ã–±–µ—Ä–∏—Ç–µ –í–∞—à–µ –∏–º—è –≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–º —Å–ø–∏—Å–∫–µ –≤ –±–ª–æ–∫–µ /start. –ü–æ–ª—É—á–∏–ª–æ—Å—å? –ï—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ: ${VK}`)
            }
            return bot.sendMessage(chatId, '–Ø –í–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!')
        }
        catch(e){
            console.log(e)
            return bot.sendMessage(chatId, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')
        }
    }
)
    bot.on('callback_query', msg => {

        const data = msg.data;
        const chatId = msg.message.chat.id; 

        const getData = (teacher) => {
          axios.get(`https://opensheet.vercel.app/${KEY}/${SHEET_NAME}`)
              .then( async resp => {
                  const info = resp.data
                  let z = 0
                  for (let i=0; i<info.length; i++){
                       if (info[i].Teacher == teacher){
                           z += 1 
                           await bot.sendMessage(chatId, 
                               `–ó–∞–Ω—è—Ç–∏–µ #${z}\nüë®‚Äçüéì–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞: ${info[i].disc}\n‚è∞–í—Ä–µ–º—è –∑–∞–Ω—è—Ç–∏—è: ${info[i].time}\n‚è≥–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${info[i].minutes} \nüßç–£—á–µ–Ω–∏–∫–∏: ${info[i].pupils} \nüìö–ö–ª–∞—Å—Å: ${info[i].class} \nüö™–ö–∞–±–∏–Ω–µ—Ç: ${info[i].kab}`)
                           }    
                        }   
                    if(z == 0) bot.sendMessage(chatId, '–ó–∞–Ω—è—Ç–∏–π —Å —Ç–∞–∫–∏–º –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º –ø–æ–∫–∞ –Ω–µ—Ç') 
                } 
            )
        }
        /*
        const dayOrWeek = () => {
            if (data == 'today'){
                
            }
            if (data == 'week'){
                
            }
        }
        const scheduleOptions = () => {
            return bot.sendMessage(chatId, `${name}, –Ω–∞ –∫–∞–∫–æ–π —Å—Ä–æ–∫ –∂–µ–ª–∞–µ—Ç–µ —É–≤–∏–¥–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ?`, scheduleParams)
        }
        */
        try{    
            if (data == '0' || '1' || '2') return getData(TEACHERS[parseInt(data, 10)])
        }
        catch(e){
            console.log(e)
            return bot.sendMessage(chatId, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')
        }
    })
}

start()
